{"version":3,"sources":["components/Navbar/index.js","components/Sidebar/index.js","components/News/index.js","App.js","serviceWorker.js","index.js"],"names":["navBar","className","to","sidebar","News","props","state","newsInfo","this","getResumeData","console","log","$","ajax","url","process","dataType","cache","success","setState","bind","error","xhr","status","err","alert","announces","map","an","i","key","src","hours","Component","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"sTA2BeA,G,MAtBA,WACX,OACE,4BAAQC,UAAU,UAChB,iIACA,sKACA,6BACE,kBAAC,IAAD,CAAMC,GAAG,QAAT,6BAEF,6BACE,kBAAC,IAAD,CAAMA,GAAG,aAAT,6BAEF,6BACE,kBAAC,IAAD,CAAMA,GAAG,SAAT,6BAEF,6BACE,kBAAC,IAAD,CAAMA,GAAG,QAAT,6BAEF,uGCVOC,G,MARC,WACZ,OACI,yBAAKF,UAAU,WACX,kBAAC,IAAD,CAAMC,GAAG,QAAT,yB,iDC8CGE,G,wDAhDX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,SAAU,IAHA,E,gEAOdC,KAAKC,gBACLC,QAAQC,IAAI,W,sCAIZC,IAAEC,KAAK,CACLC,IAAKC,2BACLC,SAAU,OACVC,OAAO,EACPC,QAAS,SAASX,GAChBC,KAAKW,SAAS,CAAEZ,cAChBa,KAAKZ,MACPa,MAAO,SAACC,EAAKC,EAAQC,GACnBd,QAAQC,IAAIa,GACZC,MAAMD,Q,+BAKL,IACGjB,EAAaC,KAAKF,MAAlBC,SACFmB,EAAYnB,EAASmB,UACzB,wBAAIzB,UAAU,aACXM,EAASmB,UAAUC,KAAK,SAACC,EAAIC,GAAL,OACzB,wBAAIC,IAAK,KAAOD,GAAID,OAEpB,KACJ,OACE,yBAAK3B,UAAU,QACb,yBAAK8B,IAAI,sBACT,4BAAKxB,EAASyB,OACd,4BAAKN,GACL,qGACA,yBAAKK,IAAI,2B,GAzCFE,c,MCeJC,MAZf,WACE,OACE,yBAAKjC,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOkC,KAAK,IAAIC,UAAWhC,OCDnBiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGNC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhC,GACLX,QAAQW,MAAMA,EAAMiC,c","file":"static/js/main.69168c6c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './Navbar.css';\r\n\r\nconst navBar = () => {\r\n    return (\r\n      <header className=\"navbar\">\r\n        <h1>健揚體育用品社 MASUKA®　　 電話：(04)2243-0949</h1>\r\n        <h2>營業時間：上午十點至晚上九點，(星期日、一店休)</h2>\r\n        <div>\r\n          <Link to=\"news\">最新消息</Link>\r\n        </div>\r\n        <div>\r\n          <Link to=\"questions\">常見問題</Link>\r\n        </div>\r\n        <div>\r\n          <Link to=\"about\">關於我們</Link>\r\n        </div>\r\n        <div>\r\n          <Link to=\"info\">匯款資訊</Link>\r\n        </div>\r\n        <h3>網站重新架構中, 敬請見諒</h3>\r\n      </header>\r\n    );\r\n};\r\n\r\nexport default navBar;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Sidebar.css';\r\n\r\nconst sidebar = () => {\r\n    return (\r\n        <div className=\"sidebar\">\r\n            <Link to=\"grip\">握把皮</Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default sidebar;","import React, { Component } from 'react';\r\nimport $ from \"jquery\";\r\nimport \"./News.css\";\r\n\r\nclass News extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            newsInfo: {}\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.getResumeData();\r\n        console.log('done)');\r\n    }\r\n\r\n    getResumeData(){\r\n        $.ajax({\r\n          url: process.env.PUBLIC_URL + \"/newsData.json\",\r\n          dataType: \"json\",\r\n          cache: false,\r\n          success: function(newsInfo) {\r\n            this.setState({ newsInfo });\r\n          }.bind(this),\r\n          error: (xhr, status, err) => {\r\n            console.log(err);\r\n            alert(err);\r\n          }\r\n        });\r\n    }\r\n\r\n    render(){\r\n        const { newsInfo } = this.state;\r\n        const announces = newsInfo.announces ? (\r\n          <ul className=\"announces\">\r\n            {newsInfo.announces.map( (an, i) =>\r\n            <li key={\"an\" + i}>{an}</li>)}\r\n          </ul>\r\n        ) : null;\r\n        return (\r\n          <div className=\"news\">\r\n            <img src=\"images/banner.jpg\" />\r\n            <h1>{newsInfo.hours}</h1>\r\n            <h1>{announces}</h1>\r\n            <h2>NEW!! 掃描QR code 加入健揚 LINE 好友:</h2>\r\n            <img src=\"images/QRCode.jpg\" />\r\n            {/* <h1>2015年7月1日起部分 球線價格調整如下:</h1> */}\r\n\r\n          </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default News;","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport Sidebar from './components/Sidebar';\nimport News from './components/News';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Navbar/>\n        <Sidebar />\n        <Switch>\n            <Route path=\"/\" component={News}/>\n        </Switch>      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}